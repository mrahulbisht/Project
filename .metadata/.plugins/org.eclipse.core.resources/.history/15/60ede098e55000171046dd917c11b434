package com.niit.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.niit.dao.ProductDAO;
import com.niit.dao.SupplierDAO;
import com.niit.domain.Supplier;

public class SupplierController {
	

	private static  Logger log = LoggerFactory.getLogger(SupplierController.class);
	
	//create supplier
	//fetch all categories
	//delete supplier
	//update supplier
	@Autowired ProductDAO productDAO;
	
	@Autowired  SupplierDAO supplierDAO;
	
	@Autowired  Supplier supplier;
	
	@Autowired  HttpSession session;
	
	
	@GetMapping("/manage_supplier_add")
	public ModelAndView  createSupplier(@RequestParam("id") String id, 
			@RequestParam("name") String name,  @RequestParam("address") String address)
   {	
		log.debug("Starting of the method manageSuppliers");
		supplier.setId(id);
		supplier.setName(name);
		supplier.setAddress(address);
		
		ModelAndView mv = new ModelAndView("Home");
		
		mv.addObject("isAdminClickedCategories", "true");
		mv.addObject("isAdmin", "true");
		
		//Before calling save method, check whether the supplier id already exist in db or not
		
		//if it is does not exist, then only call save method
		
		if (supplierDAO.getSupplierByID(id) !=null)
		{
			//supplier already exist
			mv.addObject("message", "Supplier already exist with the id " +id);
			return mv;
			
		}
		else  // actualy else is not required if return statement is there in if condition
		{
			supplierDAO.save(supplier);
			mv.addObject("message", "Supplier created successfuly " +id);
		}
		// Before calling save method, check whether supplier_id already exists
				// in db
				// if it does not exist, then only call save method.

				// get all categories
				List<Supplier> supplierList = supplierDAO.list();
				// attach to session
				session.setAttribute("supplierList", supplierList);
				session.setAttribute("supplier", supplier);

				// Before calling save method, check whether supplier_id already exists
				// in db
				// if it does not exist, then only call save method.
				
				for(Supplier supp: supplierList)
				{
				System.out.println(supp);
				}
		log.debug("End of the method manageSuppliers");
		return mv;
		
		
		
	}
	
	
	// attach data to url we use @PathVariable
	
		@RequestMapping("/manage_supplier_delete/{id}")
		public ModelAndView deleteSupplier(@PathVariable("id") String id) {

			log.debug("Starting of delete Supplier");
			log.info("You are about to delete a supplier with id : " + id);

			ModelAndView mv = new ModelAndView("redirect:/manageSuppliers");

			// Check whether products are there for this category or not
			int noOfProducts = productDAO.getAllProductsBySupplierId(id).size();
			if (noOfProducts != 0) {
				log.debug("Few products are there by this seller, you cannot delete!");
				session.setAttribute("supplierMessage", "There are " + noOfProducts + " products under this " + id + " seller, you cannot delete!");
				return mv;
			}
			if (supplierDAO.delete(id) == true) {
				mv.addObject("message", "Successfullly deleted");
			} else {
				mv.addObject("message", "Failed to delete");
			}
			log.debug("Ending of delete Supplier");

			return mv;
		}
	
	}

	

